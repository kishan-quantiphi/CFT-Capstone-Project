AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resources used by PE batch-2 group-3 for their Capstone Project.'

Parameters:

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'av-training-all'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Environment :
    Type : String
    Description : The environment in which the code is being run.
    AllowedValues :
      - dev
      - prod
    ConstraintDescription : Environment must be either 'dev' or 'prod'
    Default : prod


  # ========== RDS ==========
  dbEngine:
    Type: String
    Default: 'aurora-mysql'
    Description: 'The database engine to be used'
  dbFamily:
    Type: String
    Default: 'aurora-mysql5.7'
    Description: 'Database family for Parameter Groups'
  dbSubGrpName:
    Type: String
    Default: 'pe-g3-dbsubnetgroup'
    Description: 'Name of the db subnet group'

  dbClusterId:
    Type: String
    Default: 'pe-g3-dbcluster-3'
    Description: 'Name/Identifier for database cluster'

  dbInstanceClassDev:
    Type: String
    Default: 'db.t3.small'
    AllowedValues:
      - "db.t2.small"
      - "db.t2.medium"
      - "db.t3.small"
      - "db.t3.medium"
      - "db.r4.large"
      - "db.r4.xlarge"
      - "db.r4.2xlarge"
      - "db.r4.4xlarge"
      - "db.r4.8xlarge"
      - "db.r4.16xlarge"
      - "db.r5.large"
      - "db.r5.xlarge"
      - "db.r5.2xlarge"
      - "db.r5.4xlarge"
      - "db.r5.12xlarge"
    Description: 'Instance type of database instances'
  dbInstanceClassProd:
    Type: String
    Default: 'db.t3.medium' # change
    AllowedValues:
      - "db.t2.small"
      - "db.t2.medium"
      - "db.t3.small"
      - "db.t3.medium"
      - "db.r4.large"
      - "db.r4.xlarge"
      - "db.r4.2xlarge"
      - "db.r4.4xlarge"
      - "db.r4.8xlarge"
      - "db.r4.16xlarge"
      - "db.r5.large"
      - "db.r5.xlarge"
      - "db.r5.2xlarge"
      - "db.r5.4xlarge"
      - "db.r5.12xlarge"
    Description: 'Instance type of database instances'
  dbInstanceId:
    Type: String
    Default: 'pe-g3-dbinstance'
    Description: 'Name/Identifier for database writer'
  dbInstanceIdR1:
    Type: String
    Default: 'pe-g3-dbinstancereader1'
    Description: 'Name/Identifier for database reader 1'
  dbInstanceIdR2:
    Type: String
    Default: 'pe-g3-dbinstancereader2'
    Description: 'Name/Identifier for database reader 2'

  dbName:
    Type: String
    Default: 'dummy' # change
    Description: 'Name of the database'
  dbMasterUser:
    Type: String
    Default: '' # rem
    Description: 'Username of database admin'
  dbMasterPwd:
    Type: String
    Default: '' # rem
    Description: 'Password of database admin'

  tagName:
    Type: String
    Default: 'pe-b2-g3' # modify for each res
    Description: 'Value for Name tag'
  tagCreatorGroup:
    Type: String
    Default: 'pe19batch2group3'
    Description: 'Value for creatorGroup tag'
  tagProject:
    Type: String
    Default: 'Capstone_Project'
    Description: 'Value for Project tag'
  tagEmail:
    Type: String
    Default: 'avinash.sidhwani@quantiphi.com'
    Description: 'Value for Email tag'

  # ========== S3 ==========
  bucketName:
    Type: String
    Default: 'pe-g3-prodcat'
    Description: 'Name of bucket used for storing product catalogs'

  versioningConfig:
    Type: String
    Default: 'Enabled'
    AllowedValues:
      - Enabled
      - Disabled
    Description: 'To enable or disable versioning for the bucket'


Conditions:
  isProd: !Equals [ !Ref Environment, "prod"]
  testingEnabled : !Equals
    - Fn::FindInMap:
        - environmentConfiguration
        - !Ref Environment
        - testingEC2Enabled
    - True

Mappings:

  CIDR : 
    VPC : 
      Range : "10.0.0.0/24"
    PublicSubnet1 : 
      Range : "10.0.0.0/27"
    PublicSubnet2 : 
      Range : "10.0.0.32/27"
    PrivateSubnet1 : 
      Range : "10.0.0.128/27"
    PrivateSubnet2 : 
      Range : "10.0.0.160/27"
    PrivateSubnet3: 
      Range : "10.0.0.192/27"
  
  #################################### Environments ##############################
  environmentConfiguration : 
    dev :
      testingEC2Enabled : True
      instanceType : t2.micro
      maxInstances : 4
      # KeyPair : !Ref KeyName
      dbInstClass: 'db.t2.small'
    prod :
      testingEC2Enabled : False
      instanceType : t3.medium
      maxInstances : 6
      # KeyPair : !Ref AWS::NoValue
      dbInstClass: 'db.t2.small' # change for prod

  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t3.medium:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0cfee17793b08a293
      
Resources:
  ################ VPC ####################
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap
        - CIDR
        - VPC
        - Range
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteVPC"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Public subnet 1 ####################
  PublicSubnet1 :
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      CidrBlock: !FindInMap
        - CIDR
        - PublicSubnet1
        - Range
      MapPublicIpOnLaunch: True
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePublicSubnet1"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"
      VpcId: !Ref VPC

  ################ Private subnet 1 ####################

  PrivateSubnet1 :
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: 
          Fn::Select: 
            - 0
            - Fn::GetAZs: 
                Ref : "AWS::Region"
        CidrBlock: !FindInMap
          - CIDR
          - PrivateSubnet1
          - Range
        MapPublicIpOnLaunch: False
        Tags: 
          - 
            Key: "Name"
            Value: "group3ShoppingWebsitePrivateSubnet1"
          - 
            Key: "Email"
            Value: "yashraj.gangal@quantiphi.com"
          - 
            Key: "Project"
            Value: "Capstone_Project"
          - 
            Key: "creatorGroup"
            Value: "pe19batch2group3"
        VpcId: !Ref VPC

  ################ Public subnet 2 ####################

  PublicSubnet2 :
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      CidrBlock: !FindInMap
        - CIDR
        - PublicSubnet2
        - Range
      MapPublicIpOnLaunch: True
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePublicSubnet2"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"
      VpcId: !Ref VPC

  ################ Private subnet 2 ####################

  PrivateSubnet2 :
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      CidrBlock: !FindInMap
        - CIDR
        - PrivateSubnet2
        - Range
      MapPublicIpOnLaunch: False
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePrivateSubnet2"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"
      VpcId: !Ref VPC

  ################ Private subnet 3 ####################

  PrivateSubnet3:
    Condition: isProd

    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      CidrBlock: !FindInMap
        - CIDR
        - PrivateSubnet3
        - Range
      MapPublicIpOnLaunch: False
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePrivateSubnet3"
        - 
          Key: "Project"
          Value: !Ref tagProject
        - 
          Key: "creatorGroup"
          Value: !Ref tagCreatorGroup
      VpcId: !Ref VPC

  # ================== DB Subnet Group ==================
  DBSubnetGroup1:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS'
      DBSubnetGroupName: !If [isProd, !Ref dbSubGrpName, !Join ['', [!Ref dbSubGrpName, '-dev']]] # p
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - Fn::If:
            - isProd
            - !Ref PrivateSubnet3
            - !Ref AWS::NoValue
      Tags:
        - 
          Key: "Name"
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: "Project"
          Value: !Ref tagProject # p
        - 
          Key: "creatorGroup"
          Value: !Ref tagCreatorGroup # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p

  ################ Internet Gateway ####################

  InternetGateway : 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteIG"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Internet Gateway Attachment ####################

  InternetGatewayAttachment :
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ################ Elastic IP for NAT 1 ####################

  EIP1:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ################ Elastic IP for NAT 2 ####################

  EIP2:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ################ NAT gateway for private subnet 1 ####################

  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteNAT1"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ NAT gateway for private subnet 2 ####################

  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteNAT2"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Route Table for Public Subnets ####################

  PublicRoutetable :
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePubRT"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Route Table for Private Subnet 1 ####################

  PrivateRoutetable1 :
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePriRT1"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Route Table for Private Subnet 2 ####################

  PrivateRoutetable2 :
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsitePriRT2"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  ################ Route table association of Public Subnet 1 ####################

  PublicSubnetRouteTableAssociation1 :
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRoutetable
      SubnetId: !Ref PublicSubnet1

  ################ Route table association of Public Subnet 2 ####################

  PublicSubnetRouteTableAssociation2 :
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRoutetable
      SubnetId: !Ref PublicSubnet2

  ################ Route table association of Private Subnet 1 ####################

  PrivateSubnetRouteTableAssociation1 :
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRoutetable1
      SubnetId: !Ref PrivateSubnet1

  ################ Route table association of Private Subnet 2 ####################

  PrivateSubnetRouteTableAssociation2 :
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRoutetable2
      SubnetId: !Ref PrivateSubnet2

  ################ Attaching Public Route table to Internet Gateway ####################

  RouteToInternetGateway:
   Type: AWS::EC2::Route
   Properties:
      RouteTableId:
        Ref: PublicRoutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  ################ Attaching Private Route table 1 to NAT Gateway ####################

  RouteToNAT1:
   Type: AWS::EC2::Route
   Properties:
      RouteTableId:
         Ref: PrivateRoutetable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
         Ref: NAT1

  ################ Attaching Private Route table 2 to NAT Gateway ####################

  RouteToNAT2:
   Type: AWS::EC2::Route
   Properties:
      RouteTableId:
         Ref: PrivateRoutetable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
         Ref: NAT2

  ############################## NACL1 ##################################################
  NACL1 : 
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteNACL1"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"
      VpcId: !Ref VPC

  publicSubnet1NAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: NACL1

  publicSubnet2NAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: NACL1

  # HTTPS
  PublicNACLEgressEntry600:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 600

  PublicNACLIngressEntry600:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 600

  # HTTP
  PublicNACLEgressEntry500:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 500

  PublicNACLIngressEntry500:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 500

  # SSH when testing
  PublicNACLEgressEntry50:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 22
          To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 50

  PublicNACLIngressEntry50:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 22
          To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 50

  PublicNACLEgressEntry700:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 700

  PublicNACLIngressEntry700:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 700

  # 3306 when testing
  PublicNACLEgressEntry20:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.128/25"
      Egress: True
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 20

  PublicNACLIngressEntry20:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.128/25"
      Egress: False
      NetworkAclId: !Ref NACL1
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 20


  NACL2 : 
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteNACL2"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"
      VpcId: !Ref VPC

  privateSubnet1NAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: NACL2

  privateSubnet2NAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: NACL2

  # HTTP
  PrivateNACLEgressEntry600:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 600

  PrivateNACLIngressEntry600:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 80
          To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 600

  # HTTPS
  PrivateNACLEgressEntry500:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 500

  PrivateNACLIngressEntry500:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 443
          To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 500

  # 3306 within private subnets
  PrivateNACLEgressEntry100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "10.0.0.128/25"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  PrivateNACLIngressEntry100:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: "10.0.0.128/25"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  # 3306 with public subnets when testing enabled
  PrivateNACLEgressEntry70:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.0/25"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 70

  PrivateNACLIngressEntry70:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.0/25"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 3306
          To: 3306
      Protocol: 6
      RuleAction: allow
      RuleNumber: 70

  # SSH from public subnet when testing
  PrivateNACLEgressEntry50:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.0/25"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 22
          To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 50

  PrivateNACLIngressEntry50:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "10.0.0.0/25"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 22
          To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 50

  PrivateNACLEgressEntry700:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: True
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 700

  PrivateNACLIngressEntry700:
    Type: AWS::EC2::NetworkAclEntry
    Condition : testingEnabled
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: False
      NetworkAclId: !Ref NACL2
      PortRange: 
          From: 32768
          To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 700


  ################ Autoscaling Group ####################
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # PropagateAtLaunch : True
      AvailabilityZones:
        - Fn::Select:
          - 1
          - Fn::GetAZs: 
              Ref : "AWS::Region"
        - Fn::Select:
          - 0
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      LaunchConfigurationName:
        Ref: LaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      MinSize: 1
      MaxSize:
        Fn::FindInMap:
          - environmentConfiguration
          - !Ref Environment
          - maxInstances
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      Tags: 
      - 
        Key: "Name"
        PropagateAtLaunch : True
        Value: 
          Fn::Join: 
            - ""
            - 
              - "group3ShoppingWebsiteAutoscalingGroup-"
              - !Ref Environment
      - 
        Key: "Email"
        PropagateAtLaunch : True
        Value: "krutika.pasalkar@quantiphi.com"
      - 
        Key: "Project"
        PropagateAtLaunch : True
        Value: "Capstone_Project"
      - 
        Key: "creatorGroup"
        PropagateAtLaunch : True
        Value: "pe19batch2group3"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: false
  
################ Launch Configuration ####################
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: 
        Fn::If:
          - isProd
          - !Ref AWS::NoValue
          - !Ref KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - 
            Fn::FindInMap:
              - environmentConfiguration
              - !Ref Environment
              - instanceType
          - Arch
      SecurityGroups:
      - Ref: ServerInstanceSecurityGroup
      InstanceType:
        Fn::FindInMap:
              - environmentConfiguration
              - !Ref Environment
              - instanceType
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          -
            - "#!/bin/bash -xe\n"
            - "echo DBWRITER=\""
            - !GetAtt RDSClusterMain.Endpoint.Address
            - "\" >> /etc/environment\n"
            - "echo DBPORT=\""
            - !GetAtt RDSClusterMain.Endpoint.Port
            - "\" >> /etc/environment\n"
            - "echo DBREADER=\""
            - !GetAtt RDSClusterMain.ReadEndpoint.Address
            - "\" >> /etc/environment\n"
            - "echo S3NAME=\""
            - !Ref S3ProdCat
            - "\" >> /etc/environment\n"
            # - "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n"
            - "apt-get update -y\n"
            - "apt-get install -y ruby\n"
            - "apt-get install -y wget\n"
            - "cd /home/ubuntu \n"
            # - "REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r \".region\")\n"
            # - "wget https://aws-codedeploy-${REGION}.s3.${REGION}.amazonaws.com/latest/install\n"
            - "wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install\n"
            - "chmod +x ./install\n"
            #autoupdate codedeploy
            # - "sed -i '/@reboot/d' /etc/cron.d/codedeploy-agent-update\n"
            # - "chattr +i /etc/cron.d/codedeploy-agent-update\n"
            # - "rm -f /tmp/install"
            - "./install auto\n"
            - "service codedeploy-agent start"

################ Autoscaling policy for scaleup ####################
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

################ Autoscaling policy for scaledown ####################
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"

################ Cloudwatch alarm for scaleup ####################
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold

################ Cloudwatch alarm for scaledown ####################
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold

################ Loadbalancer ####################
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
      - Ref: LBsecuritygroup
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteLoadbalancer"
        - 
          Key: "Email"
          Value: "krutika.pasalkar@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

################ Security Group for load balancer####################

  LBsecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all inbound traffic on the load balancer listener port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteLBSecurityGroup"
        - 
          Key: "Email"
          Value: "krutika.pasalkar@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

################ Security Group for Autoscaling####################
  ServerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName : ServerEC2SG
      GroupDescription: Enable HTTPS and HTTP from the load balancer only
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteServerSecurityGroup"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  DBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName : ServerRDSSG
      GroupDescription: Security Group for the RDS Instance
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteServerSecurityGroup"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

  UserInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition : testingEnabled
    Properties:
      GroupName : UserEC2SG
      GroupDescription: Security Group for the Developers testing EC2
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: "group3ShoppingWebsiteUserSecurityGroup"
        - 
          Key: "Email"
          Value: "yashraj.gangal@quantiphi.com"
        - 
          Key: "Project"
          Value: "Capstone_Project"
        - 
          Key: "creatorGroup"
          Value: "pe19batch2group3"

################################# SG Rules #############################

  ServerSGIngressHTTPS :
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allows HTTPS from Load Balancer
      FromPort: 443
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref LBsecuritygroup
      ToPort: 443

  ServerSGIngressHTTP :
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allows HTTP from Load Balancer
      FromPort: 80
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref LBsecuritygroup
      ToPort: 80

  ServerSGIngressSSH :
    Type: AWS::EC2::SecurityGroupIngress
    Condition : testingEnabled
    Properties: 
      Description: Allows SSH from Testing EC2
      FromPort: 22
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref UserInstanceSecurityGroup
      ToPort: 22

  ServerSGEgressDBPort :
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: Allows connection to RDS
      FromPort: 3306
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref DBInstanceSecurityGroup
      ToPort: 3306

  ServerSGEgressHTTPS :
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp : "0.0.0.0/0"
      Description: Allows HTTPS to Internet
      FromPort: 443
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 443

  ServerSGEgressHTTP :
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp : "0.0.0.0/0"
      Description: Allows HTTP to Internet
      FromPort: 80
      GroupId: !GetAtt [ServerInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 80


  RDSSGIngressUser :
    Type: AWS::EC2::SecurityGroupIngress
    Condition : testingEnabled
    Properties: 
      Description: Allows connection from Testing EC2
      FromPort: 3306
      GroupId: !GetAtt [DBInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref UserInstanceSecurityGroup
      ToPort: 3306

  RDSSGIngressServer :
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Allows connection from Server EC2
      FromPort: 3306
      GroupId: !GetAtt [DBInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ServerInstanceSecurityGroup
      ToPort: 3306


  UserSGEgressSSH :
    Type: AWS::EC2::SecurityGroupEgress
    Condition : testingEnabled
    Properties: 
      Description: Allows SSH to server EC2
      FromPort: 22
      GroupId: !GetAtt [UserInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ServerInstanceSecurityGroup
      ToPort: 22

  UserSGEgressDBPort :
    Type: AWS::EC2::SecurityGroupEgress
    Condition : testingEnabled
    Properties: 
      Description: Allows connection to RDS
      FromPort: 3306
      GroupId: !GetAtt [UserInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref DBInstanceSecurityGroup
      ToPort: 3306

  UserSGEgressHTTPS :
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp : "0.0.0.0/0"
      Description: Allows HTTPS to Internet
      FromPort: 443
      GroupId: !GetAtt [UserInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 443

  UserSGEgressHTTP :
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      CidrIp : "0.0.0.0/0"
      Description: Allows HTTP to Internet
      FromPort: 80
      GroupId: !GetAtt [UserInstanceSecurityGroup, GroupId]
      IpProtocol: tcp
      ToPort: 80


  # ================ Storage ================
  # ============== RDS ==============
  RDSClusterMain:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      AvailabilityZones: # para e
      -
        Fn::Select:
          - 0
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      -
        Fn::Select:
          - 1
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      -
        !If
          - isProd
          - Fn::Select:
              - 2
              - Fn::GetAZs: 
                  Ref : "AWS::Region"
          - !Ref AWS::NoValue
      Engine: !Ref dbEngine # p
      BackupRetentionPeriod: 1
      DatabaseName: !Ref dbName # p
      DBClusterIdentifier: !If [isProd, !Ref dbClusterId, !Join ['', [!Ref dbClusterId, '-dev']]] # p
      DBSubnetGroupName: !Ref DBSubnetGroup1 # para e
      # DeletionProtection: true
      MasterUsername: !Ref dbMasterUser # p
      MasterUserPassword: !Ref dbMasterPwd # p
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
      DBClusterParameterGroupName: !Ref RDSDBClusterPGMain
      # VPCSecurityGroupIds:
      # - Fn::GetAtt: [ DBInstanceSecurityGroup, GroupId ] 
  
  RDSDBClusterPGMain:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: 'Parameter group of main DB Cluster'
      Family: !Ref dbFamily # p
      Parameters:
        character_set_database: utf8
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
  
  
  RDSDBInstancePGMain:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: 'Parameter group of main DB'
      Family: !Ref dbFamily # p
      Parameters:
        autocommit: '1'
        general_log: '1'
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
  
  RDSDBInstanceWriter:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: # para e
        Fn::Select: 
          - 0
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      # BackupRetentionPeriod: 1
      DBClusterIdentifier: !Ref RDSClusterMain
      DBInstanceClass: !If [isProd, !Ref dbInstanceClassProd, !Ref dbInstanceClassDev] # !Ref dbInstanceClass # p
      DBInstanceIdentifier: !If [isProd, !Ref dbInstanceId, !Join ['', [!Ref dbInstanceId, '-dev']]] # p
      DBParameterGroupName: !Ref RDSDBInstancePGMain
      # DBSubnetGroupName: !Ref DBSubnetGroup1 # para e
      DeleteAutomatedBackups: false
      # DeletionProtection: true
      Engine: !Ref dbEngine # p
      # MasterUsername: !Ref dbMasterUser # p
      # MasterUserPassword: !Ref dbMasterPwd # p
      #not allowed for aurora-mysql# MultiAZ: true
      PubliclyAccessible: false
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
      # VPCSecurityGroups: 
      # - Ref: DBInstanceSecurityGroup

  RDSDBInstanceReader1:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: RDSDBInstanceWriter
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: # para e
        Fn::Select: 
          - 1
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      # BackupRetentionPeriod: 1
      DBClusterIdentifier: !Ref RDSClusterMain
      DBInstanceClass: !If [isProd, !Ref dbInstanceClassProd, !Ref dbInstanceClassDev] # !Ref dbInstanceClass # p
      DBInstanceIdentifier: !If [isProd, !Ref dbInstanceIdR1, !Join ['', [!Ref dbInstanceIdR1, '-dev']]] # p
      DBParameterGroupName: !Ref RDSDBInstancePGMain
      # DBSubnetGroupName: !Ref DBSubnetGroup1 # para e
      DeleteAutomatedBackups: false
      # DeletionProtection: true
      Engine: !Ref dbEngine # p
      # MasterUsername: !Ref dbMasterUser # p
      # MasterUserPassword: !Ref dbMasterPwd # p
      #not allowed for aurora-mysql# MultiAZ: true
      PubliclyAccessible: false
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
      # VPCSecurityGroups: 
      # - Ref: DBInstanceSecurityGroup

  RDSDBInstanceReader2:
    Condition: isProd
    Type: 'AWS::RDS::DBInstance'
    DependsOn: RDSDBInstanceWriter
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: # para e
        Fn::Select: 
          - 2
          - Fn::GetAZs: 
              Ref : "AWS::Region"
      # BackupRetentionPeriod: 1
      DBClusterIdentifier: !Ref RDSClusterMain
      DBInstanceClass: !If [isProd, !Ref dbInstanceClassProd, !Ref dbInstanceClassDev] # !Ref dbInstanceClass # p
      DBInstanceIdentifier: !Ref dbInstanceIdR2 # only created in prod env # p
      DBParameterGroupName: !Ref RDSDBInstancePGMain
      # DBSubnetGroupName: !Ref DBSubnetGroup1 # para e
      DeleteAutomatedBackups: false
      # DeletionProtection: true
      Engine: !Ref dbEngine # p
      # MasterUsername: !Ref dbMasterUser # p
      # MasterUserPassword: !Ref dbMasterPwd # p
      #not allowed for aurora-mysql# MultiAZ: true
      PubliclyAccessible: false
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p
      # VPCSecurityGroups: 
      # - Ref: DBInstanceSecurityGroup


  
  RDSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 8
      MinCapacity: 2
      ResourceId: !Join ['', ["cluster:", !Ref dbClusterId]] # p
      RoleARN: "arn:aws:iam::488599217855:role/AWSServiceRoleForApplicationAutoScaling_RDSCluster"
      ScalableDimension: "rds:cluster:ReadReplicaCount"
      ServiceNamespace: "rds"
  RDSScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: "pe-g3-dbscalingpolicy"
      PolicyType: "TargetTrackingScaling"
      ScalingTargetId: !Ref RDSScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: RDSReaderAverageCPUUtilization






  # ============== S3 ==============
  S3ProdCat:
    Type: 'AWS::S3::Bucket'
    # DeletionPolicy: Retain # change for prod
    Properties:
      AccessControl: PublicRead
      BucketName: !If [isProd, !Ref bucketName, !Join ['', [!Ref bucketName, '-dev']]] # p
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: !Ref versioningConfig
      Tags:
        - 
          Key: 'Name'
          Value: !If [isProd, !Ref tagName, !Join ['', [!Ref tagName, '-dev']]] # p
        - 
          Key: 'creatorGroup'
          Value: !Ref tagCreatorGroup # p
        - 
          Key: 'Project'
          Value: !Ref tagProject # p
        - 
          Key: "Email"
          Value: !Ref tagEmail # p

  S3BucketPolicyProdCat:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3ProdCat
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                -
                  - "arn:aws:s3:::"
                  - !Ref S3ProdCat
                  - "/*"
            Principal: "*"


Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ElasticLoadBalancer
          - DNSName
